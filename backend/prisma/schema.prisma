// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String?  // null for OAuth users
  googleId    String?  @unique
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  apiKeys      APIKey[]
  pages        Page[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model APIKey {
  id           String   @id @default(cuid())
  userId       String
  provider     String   // 'openai' | 'anthropic' | 'google'
  encryptedKey String
  name         String   // user-defined label
  createdAt    DateTime @default(now())
  lastUsed     DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Page {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  isPublic    Boolean  @default(false)
  shareUrl    String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  files        File[]
  flashcards   Flashcard[]
  studyGuides  StudyGuide[]
  tests        Test[]
  chatSessions ChatSession[]

  @@map("pages")
}

model File {
  id           String   @id @default(cuid())
  pageId       String
  filename     String
  originalName String
  mimeType     String
  size         Int
  s3Key        String
  uploadedAt   DateTime @default(now())

  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Flashcard {
  id            String    @id @default(cuid())
  pageId        String
  front         String
  back          String
  difficulty    String?   // 'easy' | 'medium' | 'hard'
  isAIGenerated Boolean   @default(false)
  createdAt     DateTime  @default(now())
  tags          String[]  @default([])

  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("flashcards")
}

model StudyGuide {
  id            String   @id @default(cuid())
  pageId        String
  title         String
  content       String   // Rich text/markdown
  isAIGenerated Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("study_guides")
}

model Test {
  id            String     @id @default(cuid())
  pageId        String
  title         String
  questions     Question[]
  isAIGenerated Boolean    @default(false)
  createdAt     DateTime   @default(now())
  timeLimit     Int?       // minutes

  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("tests")
}

model Question {
  id            String   @id @default(cuid())
  testId        String
  type          String   // 'multiple_choice' | 'short_answer' | 'essay' | 'true_false'
  prompt        String
  options       String[] @default([]) // for multiple choice
  correctAnswer String?
  points        Int      @default(1)
  order         Int      @default(0)

  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model ChatSession {
  id           String        @id @default(cuid())
  pageId       String
  title        String
  apiProvider  String        // 'openai' | 'anthropic' | 'google'
  messages     ChatMessage[]
  contextFiles String[]      @default([]) // File IDs
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model ChatMessage {
  id            String      @id @default(cuid())
  chatSessionId String
  role          String      // 'user' | 'assistant'
  content       String
  timestamp     DateTime    @default(now())

  chatSession ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model ContentGeneration {
  id          String   @id @default(cuid())
  pageId      String
  type        String   // 'flashcards' | 'study_guide' | 'test'
  status      String   // 'pending' | 'processing' | 'completed' | 'failed'
  progress    Int      @default(0)
  result      Json?    // Generated content
  error       String?
  apiProvider String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("content_generations")
} 